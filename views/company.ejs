<div class="row mb-4">
  <div class="col-md-12">
    <div class="card shadow">
      <div class="card-header bg-primary text-white">
        <h5 class="mb-0"><%= companyName %> 게임 포인트 현황</h5>
      </div>
      <div class="card-body">
        <% if (userRole === '담당자') { %>
        <div class="alert alert-info mb-3">
          <i class="bi bi-info-circle-fill me-2"></i> 현재 사용자의 역할은 <strong>담당자</strong>입니다. 담당하고 있는 게임사의 상세 정보를 확인할 수 있습니다.
        </div>
        <% } %>
        
        <div class="row mb-4">
          <div class="col-lg-8">
            <div class="card">
              <div class="card-body">
                <h5 class="card-title text-center mb-4">포인트 현황</h5>
                
                <!-- 포인트 사용량 진행률 바 -->
                <div class="mb-4">
                  <% 
                    const totalAvailable = totalBasePoints + totalSelfPoints;
                    
                    // 전체 사용률은 총 계약 금액(자부담/기본 구분 없이)을 기준으로 계산
                    const totalContractUsed = typeof totalContractAmount !== 'undefined' ? totalContractAmount : 0;
                    const usagePercent = totalAvailable > 0 ? (totalContractUsed / totalAvailable * 100) : 0;
                    
                    let progressClass = 'bg-success';
                    if (usagePercent > 80) progressClass = 'bg-danger';
                    else if (usagePercent > 60) progressClass = 'bg-warning';
                    
                    const remainingPoints = totalAvailable - totalContractUsed;
                  %>
                  <div class="d-flex justify-content-between align-items-center mb-2">
                    <h6 class="mb-0">전체 사용률</h6>
                    <small class="text-muted">
                      <%= totalContractUsed.toLocaleString() %> P / <%= totalAvailable.toLocaleString() %> P
                    </small>
                  </div>
                  <div class="progress mb-2" style="height: 12px;">
                    <div class="progress-bar <%= progressClass %>" 
                         style="width: <%= Math.min(usagePercent, 100) %>%;"
                         aria-valuenow="<%= usagePercent %>" 
                         aria-valuemin="0" 
                         aria-valuemax="100">
                      <%= usagePercent.toFixed(1) %>%
                    </div>
                  </div>
                  <div class="text-center">
                    <span class="badge bg-info">
                      남은 포인트: <%= remainingPoints.toLocaleString() %> P
                    </span>
                  </div>
                </div>

                <!-- 포인트 상세 정보 -->
                <div class="row">
                  <div class="col-md-4">
                    <div class="card bg-light">
                      <div class="card-body text-center">
                        <h6 class="card-subtitle mb-2 text-muted">기본 포인트</h6>
                        <h4 class="card-text"><%= totalBasePoints.toLocaleString() %> P</h4>
                        <% if (totalUsageData && totalUsageData.base > 0) { %>
                        <small class="text-muted">사용: <%= totalUsageData.base.toLocaleString() %> P</small>
                        <% } %>
                      </div>
                    </div>
                  </div>
                  <div class="col-md-4">
                    <div class="card bg-light">
                      <div class="card-body text-center">
                        <h6 class="card-subtitle mb-2 text-muted">자부담 포인트</h6>
                        <h4 class="card-text"><%= totalSelfPoints.toLocaleString() %> P</h4>
                        <% if (totalUsageData && totalUsageData.self > 0) { %>
                        <small class="text-muted">사용: <%= totalUsageData.self.toLocaleString() %> P</small>
                        <% } %>
                      </div>
                    </div>
                  </div>
                  <div class="col-md-4">
                    <div class="card bg-primary text-white">
                      <div class="card-body text-center">
                        <h6 class="card-subtitle mb-2">총 포인트</h6>
                        <h4 class="card-text"><%= totalPoints.toLocaleString() %> P</h4>
                        <small>사용 가능</small>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-lg-4">
            <div class="card">
              <div class="card-body">
                <h5 class="card-title text-center mb-3">서비스 부문별 사용 현황</h5>
                <canvas id="serviceCategoryChart"></canvas>
                <div class="mt-2 text-center">
                  <small class="text-muted">
                    <% 
                      let categoryTotalUsed = 0;
                      if (typeof serviceCategoryUsage !== 'undefined') {
                        Object.keys(serviceCategoryUsage).forEach(category => { 
                          if(serviceCategoryUsage[category] && serviceCategoryUsage[category].totalUsed) {
                            categoryTotalUsed += serviceCategoryUsage[category].totalUsed;
                          }
                        });
                      }
                    %>
                    총 사용량: <%= categoryTotalUsed.toLocaleString() %> P
                  </small>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="table-responsive">
          <table class="table table-hover">
            <thead class="table-light">
              <tr>
                <th>게임명</th>
                <th>플랫폼</th>
                <th class="text-end">기본 포인트</th>
                <th class="text-end">자부담 포인트</th>
                <th class="text-end">총 포인트</th>
              </tr>
            </thead>
            <tbody>
              <% games.forEach(game => { %>
                <tr>
                  <td><%= game.game_name %></td>
                  <td>
                    <% 
                      let badgeClass = "bg-secondary";
                      const platform = game.platform.toLowerCase();
                      if (platform.includes('모바일')) {
                        badgeClass = "bg-primary";
                      } else if (platform.includes('pc') || platform.includes('vr') || platform.includes('콘솔')) {
                        badgeClass = "bg-danger";
                      } else if (platform.includes('웹')) {
                        badgeClass = "bg-success";
                      }
                    %>
                    <span class="badge <%= badgeClass %>"><%= game.platform %></span>
                  </td>
                  <td class="text-end"><%= game.base_points.toLocaleString() %></td>
                  <td class="text-end"><%= game.self_points.toLocaleString() %></td>
                  <td class="text-end"><strong><%= game.total_points.toLocaleString() %></strong></td>
                </tr>
              <% }); %>
            </tbody>
            <tfoot class="table-light">
              <tr>
                <td colspan="2"><strong>합계</strong></td>
                <td class="text-end"><strong><%= totalBasePoints.toLocaleString() %></strong></td>
                <td class="text-end"><strong><%= totalSelfPoints.toLocaleString() %></strong></td>
                <td class="text-end"><strong><%= totalPoints.toLocaleString() %></strong></td>
              </tr>
            </tfoot>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- 계약 정보 섹션 추가 -->
<div class="row mb-4">
  <div class="col-md-12">
    <div class="card shadow">
      <div class="card-header bg-success text-white">
        <h5 class="mb-0"><%= companyName %> 진행 중인 계약 정보</h5>
      </div>
      <div class="card-body">
        <% if (contracts && contracts.length > 0) { %>
          <!-- 필터링 컨트롤 추가 -->
          <div class="row mb-3">
            <div class="col-md-6">
              <div class="input-group">
                <label class="input-group-text" for="statusFilter">진행상황 필터</label>
                <select class="form-select" id="statusFilter">
                  <option value="all" selected>모든 상태</option>
                  <% contractStatusList.forEach(status => { %>
                    <option value="<%= status %>"><%= status %></option>
                  <% }); %>
                </select>
              </div>
            </div>
            <div class="col-md-6">
              <!-- 계약 상태 분포 시각화 -->
              <canvas id="contractStatusChart" height="100"></canvas>
            </div>
          </div>
          
          <div class="table-responsive">
            <table class="table table-hover table-sm contract-table" id="contractsTable">
              <thead class="table-light">
                <tr>
                  <th style="width: 5%;">번호</th>
                  <th style="width: 8%;">서비스 부문</th>
                  <th style="width: 12%;">상세 서비스 항목</th>
                  <th style="width: 15%;">서비스 요청명</th>
                  <th style="width: 6%;">견적서 제출 건</th>
                  <th style="width: 8%;">입찰 마감일</th>
                  <th style="width: 8%;">선정 마감일</th>
                  <th style="width: 8%;">진행상황</th>
                  <th style="width: 10%;">선정 협력사</th>
                  <th style="width: 10%;">계약금액</th>
                  <th style="width: 6%;">업무상태</th>
                  <% if (userRole === '어드민' || userRole === '매니저') { %>
                  <th style="width: 8%;" class="text-center">자부담 포인트</th>
                  <% } %>
                  <th style="width: 4%;" class="text-center">견적서제출현황</th>
                </tr>
              </thead>
              <tbody>
                <% contracts.forEach((contract, index) => { %>
                  <tr data-status="<%= contract.status %>">
                    <td><%= contract.contract_id %></td>
                    <td class="text-truncate" style="max-width: 100px;" title="<%= contract.service_category %>"><%= contract.service_category %></td>
                    <td class="text-truncate" style="max-width: 150px;" title="<%= contract.service_detail %>"><%= contract.service_detail %></td>
                    <td class="text-truncate" style="max-width: 200px;" title="<%= contract.service_request %>"><%= contract.service_request %></td>
                    <td><%= contract.quote_count %></td>
                    <td><%= contract.bid_deadline %></td>
                    <td><%= contract.selection_deadline %></td>
                    <td>
                      <span class="badge <%= 
                        contract.status === '견적요청' ? 'bg-primary' : 
                        contract.status === '견적서 제출' ? 'bg-success' : 
                        contract.status === '선정완료' ? 'bg-warning' : 
                        contract.status === '계약완료' ? 'bg-info' : 
                        contract.status === '최종계약체결' ? 'bg-danger' : 'bg-secondary' 
                      %>">
                        <%= contract.status %>
                      </span>
                    </td>
                    <td>
                      <%= contract.selected_vendor ? contract.selected_vendor : '-' %>
                    </td>
                    <td>
                      <% if (contract.contract_amount && contract.contract_amount.trim() !== '') { %>
                        <% 
                          let formattedAmount = contract.contract_amount;
                          const amountMatch = formattedAmount.match(/[\d,]+/);
                          if (amountMatch) {
                            const numberPart = amountMatch[0].replace(/,/g, '');
                            if (!isNaN(numberPart)) {
                              const formatted = Number(numberPart).toLocaleString('ko-KR');
                              formattedAmount = formattedAmount.replace(amountMatch[0], formatted);
                            }
                          }
                          // '원'을 'P'로 변경
                          formattedAmount = formattedAmount.replace(/원$/, 'P');
                        %>
                        <%= formattedAmount %>
                      <% } else { %>
                        -
                      <% } %>
                    </td>
                    <td>
                      <% if (contract.work_status && contract.work_status.trim() !== '') { %>
                        <span class="badge <%= 
                          contract.work_status === '예정' ? 'bg-info' : 
                          contract.work_status === '진행 중' ? 'bg-success' : 
                          contract.work_status === '업무 종료' ? 'bg-secondary' : 'bg-light text-dark' 
                        %>">
                          <%= contract.work_status %>
                        </span>
                      <% } else { %>
                        -
                      <% } %>
                    </td>
                    <% if (userRole === '어드민' || userRole === '매니저') { %>
                    <td class="text-center">
                      <% if (contract.contract_amount && contract.selected_vendor) { %>
                        <div class="form-check form-switch d-inline-block">
                          <input class="form-check-input" 
                                 type="checkbox" 
                                 id="pointSwitch<%= contract.contract_id %>"
                                 data-contract-id="<%= contract.contract_id %>"
                                 <%= contract.use_self_points ? 'checked' : '' %>
                                 onchange="togglePointUsage(this)">
                        </div>
                        <% if (contract.contract_amount) { %>
                        <div class="mt-1">
                          <small class="<%= contract.use_self_points ? 'text-primary' : 'text-secondary' %>">
                            <%= contract.use_self_points ? '자부담 우선 사용' : '기본 포인트만 사용' %>
                          </small>
                        </div>
                        <% } %>
                      <% } else { %>
                        <span class="text-muted">-</span>
                      <% } %>
                    </td>
                    <% } %>
                    <td class="text-center">
                      <% if (contract.quote_details && contract.quote_details !== '없음' && contract.quote_details.trim() !== '') { %>
                        <button type="button" class="btn btn-sm btn-outline-primary" data-bs-toggle="modal" data-bs-target="#quoteModal<%= index %>">
                          보기
                        </button>

                        <!-- 견적서제출현황 모달 -->
                        <div class="modal fade" id="quoteModal<%= index %>" tabindex="-1" aria-labelledby="quoteModalLabel<%= index %>" aria-hidden="true">
                          <div class="modal-dialog modal-xl">
                            <div class="modal-content">
                              <div class="modal-header">
                                <h5 class="modal-title" id="quoteModalLabel<%= index %>">견적서제출현황 - <%= contract.service_request %></h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                              </div>
                              <div class="modal-body">
                                <div class="card">
                                  <div class="card-header">
                                    <h6 class="mb-0">계약 정보</h6>
                                  </div>
                                  <div class="card-body">
                                    <div class="row mb-2">
                                      <div class="col-md-4"><strong>번호:</strong> <%= contract.contract_id %></div>
                                      <div class="col-md-4"><strong>서비스 부문:</strong> <%= contract.service_category %></div>
                                      <div class="col-md-4"><strong>서비스 항목:</strong> <%= contract.service_detail %></div>
                                    </div>
                                    <div class="row mb-2">
                                      <div class="col-md-8"><strong>서비스 요청명:</strong> <%= contract.service_request %></div>
                                      <div class="col-md-4"><strong>게임사:</strong> <%= contract.company_name %></div>
                                    </div>
                                    <% if (contract.selected_vendor || contract.contract_amount) { %>
                                    <div class="row">
                                      <div class="col-md-4">
                                        <strong>선정 협력사:</strong> 
                                        <%= contract.selected_vendor ? contract.selected_vendor : '미확정' %>
                                      </div>
                                      <div class="col-md-4">
                                        <strong>계약금액:</strong> 
                                        <% if (contract.contract_amount && contract.contract_amount.trim() !== '') { %>
                                          <% 
                                            let formattedAmount = contract.contract_amount;
                                            const amountMatch = formattedAmount.match(/[\d,]+/);
                                            if (amountMatch) {
                                              const numberPart = amountMatch[0].replace(/,/g, '');
                                              if (!isNaN(numberPart)) {
                                                const formatted = Number(numberPart).toLocaleString('ko-KR');
                                                formattedAmount = formattedAmount.replace(amountMatch[0], formatted);
                                              }
                                            }
                                            // '원'을 'P'로 변경
                                            formattedAmount = formattedAmount.replace(/원$/, 'P');
                                          %>
                                          <%= formattedAmount %>
                                        <% } else { %>
                                          미확정
                                        <% } %>
                                      </div>
                                      <div class="col-md-4">
                                        <strong>업무상태:</strong> 
                                        <% if (contract.work_status && contract.work_status.trim() !== '') { %>
                                          <span class="badge <%= 
                                            contract.work_status === '예정' ? 'bg-info' : 
                                            contract.work_status === '진행 중' ? 'bg-success' : 
                                            contract.work_status === '업무 종료' ? 'bg-secondary' : 'bg-light text-dark' 
                                          %>">
                                            <%= contract.work_status %>
                                          </span>
                                        <% } else { %>
                                          -
                                        <% } %>
                                      </div>
                                    </div>
                                    <% } %>
                                  </div>
                                </div>
                                
                                <div class="card mt-3">
                                  <div class="card-header">
                                    <h6 class="mb-0">견적서 제출 현황</h6>
                                  </div>
                                  <div class="card-body">
                                    <% 
                                      // 견적서 데이터 처리
                                      const quoteDetails = contract.quote_details || '';
                                      
                                      if (quoteDetails && quoteDetails !== '없음' && quoteDetails.trim() !== '') {
                                        // 견적서 목록 생성
                                        const quotes = [];
                                        
                                        // 디버깅 정보 - 원본 데이터 출력
                                        console.log('원본 견적 데이터:', quoteDetails);
                                        
                                        // 줄바꿈 문자 처리 (다양한 줄바꿈 문자 대응)
                                        // \n, \r, \r\n 모두 처리
                                        const normalizedDetails = quoteDetails.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
                                        
                                        // 디버깅 정보 - 정규화된 데이터 출력
                                        console.log('정규화된 견적 데이터:', normalizedDetails);
                                        
                                        if (normalizedDetails.includes('\n')) {
                                          // 줄바꿈으로 분리
                                          const lines = normalizedDetails.split('\n');
                                          console.log('분리된 견적 라인 수:', lines.length);
                                          
                                          lines.forEach((line, i) => {
                                            if (line.trim()) {
                                              console.log(`견적 라인 ${i+1}:`, line.trim());
                                              quotes.push(line.trim());
                                            }
                                          });
                                        } else {
                                          // 단일 견적서
                                          quotes.push(normalizedDetails.trim());
                                        }
                                        
                                        console.log('처리된 견적 항목 수:', quotes.length);
                                    %>
                                      <div class="table-responsive">
                                        <table class="table table-bordered table-hover">
                                          <thead class="table-light">
                                            <tr>
                                              <th>협력사명</th>
                                              <th>견적</th>
                                              <th>견적일자</th>
                                            </tr>
                                          </thead>
                                          <tbody>
                                            <% 
                                              // 각 견적서 항목 처리
                                              quotes.forEach(quote => {
                                                // 협력사(금액, 날짜) 형식 추출
                                                // 금액에 쉼표가 포함될 수 있으므로 마지막 쉼표를 기준으로 분리
                                                const regex = /(.+?)\((.+),\s*(\d{4}-\d{2}-\d{2})\)/;
                                                const match = quote.match(regex);
                                                
                                                if (match) {
                                                  const vendor = match[1].trim();
                                                  const amount = match[2].trim();
                                                  const date = match[3].trim();
                                            %>
                                              <tr>
                                                <td><%= vendor %></td>
                                                <td><%= amount.replace(/원$/, 'P') %></td>
                                                <td><%= date %></td>
                                              </tr>
                                            <% } else { %>
                                              <tr>
                                                <td colspan="3" class="text-center">
                                                  <%= quote %>
                                                </td>
                                              </tr>
                                            <% }
                                            }); 
                                            %>
                                          </tbody>
                                        </table>
                                      </div>
                                    <% } else { %>
                                      <div class="alert alert-info mb-0">
                                        <i class="bi bi-info-circle me-2"></i> 제출된 견적서가 없습니다.
                                      </div>
                                    <% } %>
                                  </div>
                                </div>
                              </div>
                              <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">닫기</button>
                              </div>
                            </div>
                          </div>
                        </div>
                      <% } else { %>
                        <span class="text-muted">없음</span>
                      <% } %>
                    </td>
                  </tr>
                <% }); %>
              </tbody>
            </table>
          </div>
          <div class="mt-3">
            <p class="text-muted"><small>* 계약 정보는 1시간마다 자동으로 업데이트됩니다. 마지막 업데이트: <%= new Date().toLocaleString('ko-KR') %></small></p>
          </div>
        <% } else { %>
          <div class="alert alert-warning">
            <p><i class="bi bi-exclamation-triangle-fill me-2"></i> 현재 진행 중인 계약 정보가 없습니다.</p>
            <% if (userRole === '어드민') { %>
            <p>홈페이지에서 '데이터 동기화' 버튼을 클릭하여 최신 계약 데이터를 가져오세요.</p>
            <% } %>
          </div>
        <% } %>
      </div>
    </div>
  </div>
</div>

<!-- 글로벌 성과 현황 섹션 추가 -->
<div class="row mb-4">
  <div class="col-md-12">
    <div class="card shadow">
      <div class="card-header bg-info text-white">
        <h5 class="mb-0"><%= companyName %> 글로벌 성과 현황</h5>
      </div>
      <div class="card-body">
        <!-- 데이터 설명 추가 -->
        <div class="alert alert-light border mb-4">
          <h6 class="mb-2"><i class="bi bi-info-circle me-2"></i>데이터 설명</h6>
          <ul class="mb-0 small">
            <li><strong>글로벌</strong>: 한국을 제외한 전세계 모든 국가의 합계 데이터</li>
            <li><strong>진출국가</strong>: 게임사가 지정한 6개 국가의 합계 데이터 (글로벌 데이터의 일부)</li>
            <li><strong>지표별 특성</strong>: 매출/다운로드/위시리스트는 기간 내 합계, DAU는 기간 내 평균값으로 표시</li>
            <li><strong>데이터 출처</strong>: 게임사가 공유한 스프레드시트 데이터 기반</li>
          </ul>
        </div>
        
        <!-- 필터링 컨트롤 -->
        <div class="row mb-4">
          <div class="col-md-4 mb-3">
            <!-- 지표 선택 버튼 그룹 -->
            <div class="btn-group" role="group" aria-label="지표 선택">
              <input type="radio" class="btn-check" name="metricRadio" id="metricRevenue" value="revenue" checked>
              <label class="btn btn-outline-primary" for="metricRevenue">매출</label>
              
              <input type="radio" class="btn-check" name="metricRadio" id="metricDownloads" value="downloads">
              <label class="btn btn-outline-primary" for="metricDownloads">다운로드</label>
              
              <input type="radio" class="btn-check" name="metricRadio" id="metricDau" value="dau">
              <label class="btn btn-outline-primary" for="metricDau">DAU</label>
              
              <input type="radio" class="btn-check" name="metricRadio" id="metricWishlist" value="wishlist">
              <label class="btn btn-outline-primary" for="metricWishlist">위시리스트</label>
            </div>
          </div>
          <div class="col-md-8">
            <div class="input-group">
              <label class="input-group-text" for="startDate">기간 선택</label>
              <input type="date" class="form-control" id="startDate">
              <span class="input-group-text">~</span>
              <input type="date" class="form-control" id="endDate">
              <button class="btn btn-outline-primary" id="applyDateFilter">적용</button>
            </div>
          </div>
        </div>
        
        <div id="performanceChartContainer">
          <canvas id="performanceChart" height="300"></canvas>
        </div>
        
        <!-- 누적 데이터 표시 섹션 추가 -->
        <div class="row mt-4" id="accumulatedDataContainer">
          <!-- 데이터 표시 방식 선택 탭 -->
          <div class="col-12 mb-3">
            <ul class="nav nav-pills" id="dataViewTabs" role="tablist">
              <li class="nav-item" role="presentation">
                <button class="nav-link active" id="sum-tab" data-bs-toggle="pill" data-bs-target="#sum-data" type="button" role="tab" aria-controls="sum-data" aria-selected="true">기간 내 합계</button>
              </li>
              <li class="nav-item" role="presentation">
                <button class="nav-link" id="avg-tab" data-bs-toggle="pill" data-bs-target="#avg-data" type="button" role="tab" aria-controls="avg-data" aria-selected="false">기간 내 평균</button>
              </li>
              <li class="nav-item" role="presentation">
                <button class="nav-link" id="total-tab" data-bs-toggle="pill" data-bs-target="#total-data" type="button" role="tab" aria-controls="total-data" aria-selected="false">전체 데이터 합계</button>
              </li>
            </ul>
          </div>
          
          <div class="tab-content" id="dataViewTabContent">
            <!-- 기간 내 합계 탭 -->
            <div class="tab-pane fade show active" id="sum-data" role="tabpanel" aria-labelledby="sum-tab">
              <div class="row">
                <div class="col-md-6 mb-3">
                  <div class="card border-0 shadow-sm h-100">
                    <div class="card-body p-4 d-flex flex-column">
                      <h5 class="card-title text-muted mb-3">글로벌 <small class="text-info">(기간 내 합계)</small></h5>
                      <h2 class="card-text fw-bold mb-0" id="globalAccumulatedValue">0</h2>
                      <p class="card-text mt-2 mt-auto"><span id="globalChangeRate" class="badge rounded-pill"></span></p>
                    </div>
                  </div>
                </div>
                <div class="col-md-6 mb-3">
                  <div class="card border-0 shadow-sm h-100">
                    <div class="card-body p-4 d-flex flex-column">
                      <h5 class="card-title text-muted mb-3">진출국가 <small class="text-info">(기간 내 합계)</small></h5>
                      <h2 class="card-text fw-bold mb-0" id="targetAccumulatedValue">0</h2>
                      <p class="card-text mt-2 mt-auto"><span id="targetChangeRate" class="badge rounded-pill"></span></p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- 기간 내 평균 탭 -->
            <div class="tab-pane fade" id="avg-data" role="tabpanel" aria-labelledby="avg-tab">
              <div class="row">
                <div class="col-md-6 mb-3">
                  <div class="card border-0 shadow-sm h-100">
                    <div class="card-body p-4 d-flex flex-column">
                      <h5 class="card-title text-muted mb-3">글로벌 <small class="text-info">(기간 내 평균)</small></h5>
                      <h2 class="card-text fw-bold mb-0" id="globalAverageValue">0</h2>
                      <p class="card-text mt-2 mt-auto"><small class="text-muted">일 평균 값</small></p>
                    </div>
                  </div>
                </div>
                <div class="col-md-6 mb-3">
                  <div class="card border-0 shadow-sm h-100">
                    <div class="card-body p-4 d-flex flex-column">
                      <h5 class="card-title text-muted mb-3">진출국가 <small class="text-info">(기간 내 평균)</small></h5>
                      <h2 class="card-text fw-bold mb-0" id="targetAverageValue">0</h2>
                      <p class="card-text mt-2 mt-auto"><small class="text-muted">일 평균 값</small></p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- 전체 데이터 합계 탭 -->
            <div class="tab-pane fade" id="total-data" role="tabpanel" aria-labelledby="total-tab">
              <div class="row">
                <div class="col-md-6 mb-3">
                  <div class="card border-0 shadow-sm h-100">
                    <div class="card-body p-4 d-flex flex-column">
                      <h5 class="card-title text-muted mb-3">글로벌 <small class="text-info">(전체 합계)</small></h5>
                      <h2 class="card-text fw-bold mb-0" id="globalTotalValue">0</h2>
                      <p class="card-text mt-2 mt-auto"><small class="text-muted">전체 기간 데이터 합산</small></p>
                    </div>
                  </div>
                </div>
                <div class="col-md-6 mb-3">
                  <div class="card border-0 shadow-sm h-100">
                    <div class="card-body p-4 d-flex flex-column">
                      <h5 class="card-title text-muted mb-3">진출국가 <small class="text-info">(전체 합계)</small></h5>
                      <h2 class="card-text fw-bold mb-0" id="targetTotalValue">0</h2>
                      <p class="card-text mt-2 mt-auto"><small class="text-muted">전체 기간 데이터 합산</small></p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="mt-3">
          <p class="text-muted"><small>* 성과 현황 데이터는 매일 자동으로 업데이트됩니다. <span id="lastUpdateInfo"></span></small></p>
          <% if (userRole === '어드민') { %>
          <div class="text-end">
            <a href="/sync-performance?from=<%= encodeURIComponent('/games/company/' + companyName) %>" class="btn btn-sm btn-outline-primary">
              <i class="bi bi-arrow-repeat"></i> 성과 현황 데이터 동기화
            </a>
          </div>
          <% } %>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // 서비스 부문별 사용량 차트 생성
  var serviceCtx = document.getElementById('serviceCategoryChart').getContext('2d');
  
  // 서비스 부문별 데이터 준비
  var categories = [];
  var usageData = [];
  var backgroundColors = [];
  
  <% 
    // 색상 정의
    const categoryColors = {
      '게임 서비스': 'rgba(74, 86, 141, 0.8)',
      '마케팅': 'rgba(90, 138, 90, 0.8)',
      '인프라': 'rgba(200, 168, 105, 0.8)',
      '컨설팅': 'rgba(107, 155, 210, 0.8)',
      '기타': 'rgba(122, 122, 122, 0.8)',
      '미사용 포인트': 'rgba(220, 220, 220, 0.8)'
    };
    
    // 총 사용량 계산
    let totalUsed = 0;
    if (typeof serviceCategoryUsage !== 'undefined') {
      Object.keys(serviceCategoryUsage).forEach(category => { 
        if(serviceCategoryUsage[category] && serviceCategoryUsage[category].totalUsed) {
          totalUsed += serviceCategoryUsage[category].totalUsed;
        }
      });
    }
    
    // 미사용 포인트 계산
    const unusedPoints = totalPoints - totalUsed;
  %>
  
  <% if (typeof serviceCategoryUsage !== 'undefined') {
      Object.keys(serviceCategoryUsage).forEach(category => { 
        if (serviceCategoryUsage[category] && serviceCategoryUsage[category].totalUsed > 0) { %>
    categories.push('<%= category %>');
    usageData.push(<%= serviceCategoryUsage[category].totalUsed %>);
    backgroundColors.push('<%= categoryColors[category] || "rgba(122, 122, 122, 0.8)" %>');
  <% } });
    } %>
  
  <% if (unusedPoints > 0) { %>
    categories.push('미사용 포인트');
    usageData.push(<%= unusedPoints %>);
    backgroundColors.push('<%= categoryColors["미사용 포인트"] %>');
  <% } %>
  
  new Chart(serviceCtx, {
    type: 'doughnut',
    data: {
      labels: categories,
      datasets: [{
        data: usageData,
        backgroundColor: backgroundColors,
        borderWidth: 1,
        borderColor: '#ffffff'
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: true,
      plugins: {
        title: {
          display: false
        },
        legend: {
          position: 'bottom',
          labels: {
            padding: 10,
            font: {
              size: 11
            }
          }
        },
        tooltip: {
          callbacks: {
            label: function(context) {
              var label = context.label || '';
              var value = context.raw || 0;
              var percentage = Math.round((value / <%= totalPoints %>) * 100);
              return label + ': ' + value.toLocaleString() + ' P (' + percentage + '%)';
            }
          }
        }
      }
    }
  });
  
  <% if (contracts && contracts.length > 0) { %>
  // 계약 상태별 필터링 로직
  document.getElementById('statusFilter').addEventListener('change', function() {
    var selectedStatus = this.value;
    var rows = document.querySelectorAll('#contractsTable tbody tr');
    
    rows.forEach(function(row) {
      var status = row.getAttribute('data-status');
      if (selectedStatus === 'all' || status === selectedStatus) {
        row.style.display = '';
      } else {
        row.style.display = 'none';
      }
    });
  });
  
  // 계약 상태 차트 생성
  var statusCounts = {
    <% contractStatusList.forEach(status => { %>
    '<%= status %>': 0,
    <% }); %>
    '기타': 0
  };
  
  // 상태별 카운트 계산
  document.querySelectorAll('#contractsTable tbody tr').forEach(function(row) {
    var status = row.getAttribute('data-status');
    if (statusCounts.hasOwnProperty(status)) {
      statusCounts[status]++;
    } else {
      statusCounts['기타']++;
    }
  });
  
  // 상태별 색상 매핑
  var statusColors = {
    '견적요청': 'rgba(13, 110, 253, 0.7)',
    '견적서 제출': 'rgba(25, 135, 84, 0.7)',
    '선정완료': 'rgba(255, 193, 7, 0.7)',
    '계약완료': 'rgba(13, 202, 240, 0.7)',
    '기타': 'rgba(108, 117, 125, 0.7)'
  };
  
  // 데이터 준비
  var statuses = Object.keys(statusCounts);
  var counts = Object.values(statusCounts);
  var colors = statuses.map(function(status) { 
    return statusColors[status] || 'rgba(108, 117, 125, 0.7)';
  });
  
  // 계약 상태 차트 생성
  var statusCtx = document.getElementById('contractStatusChart').getContext('2d');
  new Chart(statusCtx, {
    type: 'doughnut',
    data: {
      labels: statuses,
      datasets: [{
        data: counts,
        backgroundColor: colors,
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          display: false
        },
        tooltip: {
          callbacks: {
            label: function(context) {
              var label = context.label || '';
              var value = context.raw || 0;
              var total = context.dataset.data.reduce(function(a, b) { return a + b; }, 0);
              var percentage = Math.round((value / total) * 100);
              return label + ': ' + value + '건 (' + percentage + '%)';
            }
          }
        }
      }
    }
  });
  <% } %>

  // 성과 현황 차트 생성
  const performanceCtx = document.getElementById('performanceChart').getContext('2d');
  let performanceChart = null;
  
  // 성과 현황 데이터 디버깅
  console.log('성과 현황 데이터 디버깅 시작');
  const performanceData = <%- JSON.stringify(gamePerformanceData || {}) %>;
  console.log('성과 현황 데이터:', performanceData);
  
  // 기본 지표, 기간 설정
  let currentMetric = '<%= defaultMetric || "revenue" %>';
  let currentPeriod = 'custom'; // 커스텀 기간으로 변경
  
  // 날짜 범위 설정 (기본: 현재 날짜에서 30일 전)
  const today = new Date();
  const thirtyDaysAgo = new Date();
  thirtyDaysAgo.setDate(today.getDate() - 30);
  
  // 날짜 포맷팅 함수 (YYYY-MM-DD)
  function formatDate(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
  }
  
  let startDate = formatDate(thirtyDaysAgo);
  let endDate = formatDate(today);
  
  // 초기 날짜 설정
  document.getElementById('startDate').value = startDate;
  document.getElementById('endDate').value = endDate;
  
  console.log('현재 설정:', { currentMetric, startDate, endDate });
  
  // 차트 색상 설정
  const chartColors = {
    line: 'rgba(75, 192, 192, 1)',
    anomaly: 'rgba(255, 99, 132, 1)',
    movingAvg: 'rgba(54, 162, 235, 0.5)'
  };
  
  // 성과 현황 차트 업데이트 함수
  function updatePerformanceChart() {
    try {
      console.log('차트 업데이트 시작');
      
      // 데이터 확인 및 디버깅
      console.log('성과 현황 데이터 확인:', performanceData);
      
      // 현재 선택된 지표, 기간에 대한 데이터 가져오기
      if (!performanceData) {
        console.error('성과 현황 데이터가 없습니다.');
        document.getElementById('performanceChartContainer').innerHTML = `
          <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle me-2"></i> 성과 현황 데이터가 없습니다.
          </div>
        `;
        return;
      }
      
      // 데이터 구조 확인
      if (!performanceData[currentMetric]) {
        console.error(`${currentMetric} 지표 데이터가 없습니다.`);
        document.getElementById('performanceChartContainer').innerHTML = `
          <div class="alert alert-warning">
            <i class="bi bi-info-circle me-2"></i> ${currentMetric} 지표 데이터가 없습니다.
          </div>
        `;
        return;
      }
      
      // 날짜 범위 가져오기
      const start = new Date(document.getElementById('startDate').value);
      const end = new Date(document.getElementById('endDate').value);
      
      // 일별 데이터를 기준으로 필터링 (daily 데이터가 가장 상세함)
      const periodToUse = 'daily';
      
      // 글로벌 데이터 확인 및 필터링
      let filteredGlobalData = [];
      let allGlobalData = [];
      const hasGlobalData = performanceData[currentMetric].global && 
                           performanceData[currentMetric].global[periodToUse] && 
                           performanceData[currentMetric].global[periodToUse].length > 0;
      
      if (hasGlobalData) {
        // 전체 데이터 저장
        allGlobalData = [...performanceData[currentMetric].global[periodToUse]];
        
        // 선택된 기간 필터링
        filteredGlobalData = performanceData[currentMetric].global[periodToUse].filter(item => {
          const itemDate = new Date(item.date);
          return itemDate >= start && itemDate <= end;
        });
      }
                           
      // 진출국가 데이터 확인 및 필터링
      let filteredTargetData = [];
      let allTargetData = [];
      const hasTargetData = performanceData[currentMetric].target && 
                           performanceData[currentMetric].target[periodToUse] && 
                           performanceData[currentMetric].target[periodToUse].length > 0;
      
      if (hasTargetData) {
        // 전체 데이터 저장
        allTargetData = [...performanceData[currentMetric].target[periodToUse]];
        
        // 선택된 기간 필터링
        filteredTargetData = performanceData[currentMetric].target[periodToUse].filter(item => {
          const itemDate = new Date(item.date);
          return itemDate >= start && itemDate <= end;
        });
      }
      
      if (filteredGlobalData.length === 0 && filteredTargetData.length === 0) {
        console.log('선택한 기간에 표시할 데이터가 없습니다.');
        document.getElementById('performanceChartContainer').innerHTML = `
          <div class="alert alert-info">
            <i class="bi bi-info-circle me-2"></i> 선택한 기간에 표시할 데이터가 없습니다.
          </div>
        `;
        return;
      }
      
      // 기존 차트가 있으면 파괴
      if (performanceChart) {
        performanceChart.destroy();
      }
      
      // 지표별 단위 설정
      let yAxisLabel = '';
      switch(currentMetric) {
        case 'revenue':
          yAxisLabel = '매출 (원)';
          break;
        case 'downloads':
          yAxisLabel = '다운로드 수';
          break;
        case 'dau':
          yAxisLabel = 'DAU';
          break;
        case 'wishlist':
          yAxisLabel = '위시리스트 수';
          break;
      }
      
      // 데이터셋 준비
      const datasets = [];
      
      // 날짜 레이블 생성 (모든 날짜를 포함하도록)
      const allDates = new Set();
      
      // 글로벌 데이터의 날짜 추가
      filteredGlobalData.forEach(item => allDates.add(item.date));
      
      // 진출국가 데이터의 날짜 추가
      filteredTargetData.forEach(item => allDates.add(item.date));
      
      // 날짜 정렬
      const sortedDates = Array.from(allDates).sort();
      
      // 글로벌 데이터 추가
      if (filteredGlobalData.length > 0) {
        // 날짜별 값 매핑 및 전일 대비 증감률 계산
        const dataMap = {};
        const changeRateMap = {};
        
        // 값 매핑
        filteredGlobalData.forEach(item => {
          // 값이 0인 경우에도 데이터 포인트로 표시하기 위해 null이 아닌 0으로 설정
          dataMap[item.date] = item.value !== null ? item.value : null;
        });
        
        // 증감률 계산
        sortedDates.forEach((date, index) => {
          if (index > 0) {
            const currentValue = dataMap[date];
            const prevValue = dataMap[sortedDates[index - 1]];
            
            if (currentValue !== null && prevValue !== null && prevValue !== 0) {
              const changeRate = ((currentValue - prevValue) / prevValue) * 100;
              changeRateMap[date] = changeRate.toFixed(1);
            } else {
              changeRateMap[date] = null;
            }
          } else {
            changeRateMap[date] = null; // 첫 번째 데이터는 증감률 없음
          }
        });
        
        // 모든 날짜에 대한 데이터 배열 생성 (없는 날짜는 null)
        const values = sortedDates.map(date => dataMap[date] !== undefined ? dataMap[date] : null);
        
        datasets.push({
          label: `글로벌 ${yAxisLabel}`,
          data: values,
          borderColor: 'rgb(75, 192, 192)',
          backgroundColor: 'rgba(75, 192, 192, 0.2)',
          borderWidth: 2,
          fill: false,
          spanGaps: false, // 0 값도 연결하기 위해 false로 설정
          changeRates: changeRateMap // 증감률 데이터 추가
        });
      }
      
      // 진출국가 데이터 추가
      if (filteredTargetData.length > 0) {
        // 날짜별 값 매핑 및 전일 대비 증감률 계산
        const dataMap = {};
        const changeRateMap = {};
        
        // 값 매핑
        filteredTargetData.forEach(item => {
          // 값이 0인 경우에도 데이터 포인트로 표시하기 위해 null이 아닌 0으로 설정
          dataMap[item.date] = item.value !== null ? item.value : null;
        });
        
        // 증감률 계산
        sortedDates.forEach((date, index) => {
          if (index > 0) {
            const currentValue = dataMap[date];
            const prevValue = dataMap[sortedDates[index - 1]];
            
            if (currentValue !== null && prevValue !== null && prevValue !== 0) {
              const changeRate = ((currentValue - prevValue) / prevValue) * 100;
              changeRateMap[date] = changeRate.toFixed(1);
            } else {
              changeRateMap[date] = null;
            }
          } else {
            changeRateMap[date] = null; // 첫 번째 데이터는 증감률 없음
          }
        });
        
        // 모든 날짜에 대한 데이터 배열 생성 (없는 날짜는 null)
        const values = sortedDates.map(date => dataMap[date] !== undefined ? dataMap[date] : null);
        
        datasets.push({
          label: `진출국가 ${yAxisLabel}`,
          data: values,
          borderColor: 'rgb(255, 99, 132)',
          backgroundColor: 'rgba(255, 99, 132, 0.2)',
          borderWidth: 2,
          fill: false,
          spanGaps: false, // 0 값도 연결하기 위해 false로 설정
          changeRates: changeRateMap // 증감률 데이터 추가
        });
      }
      
      // 차트 생성
      performanceChart = new Chart(performanceCtx, {
        type: 'line',
        data: {
          labels: sortedDates,
          datasets: datasets
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          interaction: {
            mode: 'index',
            intersect: false
          },
          plugins: {
            tooltip: {
              enabled: true,
              backgroundColor: 'rgba(0, 0, 0, 0.8)',
              titleFont: {
                size: 14,
                weight: 'bold'
              },
              bodyFont: {
                size: 13
              },
              padding: 10,
              callbacks: {
                title: function(tooltipItems) {
                  if (!tooltipItems.length) return '';
                  const date = tooltipItems[0].label;
                  if (!date) return '';
                  
                  const parts = date.split('-');
                  if (parts.length !== 3) return date;
                  
                  return `${parts[0]}년 ${parts[1]}월 ${parts[2]}일`;
                },
                label: function(tooltipItem) {
                  let label = tooltipItem.dataset.label || '';
                  let value = tooltipItem.raw || 0;
                  
                  // 지표에 따른 단위 추가
                  let formattedValue = value !== null ? value.toLocaleString() : '데이터 없음';
                  
                  // 지표별 단위 설정
                  if (currentMetric === 'revenue') {
                    formattedValue += ' 원';
                  } else if (currentMetric === 'downloads') {
                    formattedValue += ' 회';
                  } else if (currentMetric === 'dau') {
                    formattedValue += ' 명';
                  } else if (currentMetric === 'wishlist') {
                    formattedValue += ' 개';
                  }
                  
                  return `${label}: ${formattedValue}`;
                },
                afterLabel: function(tooltipItem) {
                  // 전일 대비 증감률 추가
                  const date = tooltipItem.label;
                  const changeRate = tooltipItem.dataset.changeRates ? tooltipItem.dataset.changeRates[date] : null;
                  if (changeRate !== null && changeRate !== undefined) {
                    const isPositive = parseFloat(changeRate) >= 0;
                    const sign = isPositive ? '+' : '';
                    return `전일 대비: ${sign}${changeRate}%`;
                  }
                  return '';
                },
                footer: function(tooltipItems) {
                  // 글로벌과 진출국가 데이터가 모두 있는 경우 비율 표시
                  if (tooltipItems.length === 2) {
                    const globalItem = tooltipItems.find(item => item.dataset.label.includes('글로벌'));
                    const targetItem = tooltipItems.find(item => item.dataset.label.includes('진출국가'));
                    
                    if (globalItem && targetItem && globalItem.raw > 0) {
                      const ratio = ((targetItem.raw / globalItem.raw) * 100).toFixed(1);
                      return `진출국가/글로벌 비율: ${ratio}%`;
                    }
                  }
                  return '';
                }
              }
            }
          }
        }
      });
      
      // 누적 데이터 계산 및 표시
      let globalAccumulated = 0;
      let targetAccumulated = 0;
      let globalAverage = 0;
      let targetAverage = 0;
      let globalTotal = 0;
      let targetTotal = 0;
      
      // 지표 유형에 따른 집계 방식 결정
      const isAverageMetric = currentMetric === 'dau'; // DAU는 평균 계산이 더 적합
      
      // 글로벌 데이터 계산
      if (filteredGlobalData.length > 0) {
        // 기간 내 합계 (DAU는 평균, 나머지는 합계)
        if (isAverageMetric) {
          // DAU는 평균값 계산
          globalAccumulated = filteredGlobalData.reduce((sum, item) => {
            return sum + (item.value !== null ? Number(item.value) : 0);
          }, 0) / filteredGlobalData.length;
        } else {
          // 매출, 다운로드, 위시리스트는 합계 계산
          globalAccumulated = filteredGlobalData.reduce((sum, item) => {
            return sum + (item.value !== null ? Number(item.value) : 0);
          }, 0);
        }
        
        // 기간 내 일평균 계산
        globalAverage = filteredGlobalData.reduce((sum, item) => {
          return sum + (item.value !== null ? Number(item.value) : 0);
        }, 0) / filteredGlobalData.length;
        
        // 기간 내 증감률 계산 (선택 기간의 첫날과 마지막날 비교)
        if (filteredGlobalData.length >= 2) {
          const firstDayValue = filteredGlobalData[0].value || 0;
          const lastDayValue = filteredGlobalData[filteredGlobalData.length - 1].value || 0;
          
          if (firstDayValue > 0) {
            const changeRate = ((lastDayValue - firstDayValue) / firstDayValue) * 100;
            const isPositive = changeRate >= 0;
            const sign = isPositive ? '+' : '';
            const badgeClass = isPositive ? 'bg-success' : 'bg-danger';
            document.getElementById('globalChangeRate').className = `badge rounded-pill ${badgeClass}`;
            document.getElementById('globalChangeRate').textContent = `${sign}${changeRate.toFixed(2)}%`;
          }
        }
      }
      
      // 진출국가 데이터 계산
      if (filteredTargetData.length > 0) {
        // 기간 내 합계 (DAU는 평균, 나머지는 합계)
        if (isAverageMetric) {
          // DAU는 평균값 계산
          targetAccumulated = filteredTargetData.reduce((sum, item) => {
            return sum + (item.value !== null ? Number(item.value) : 0);
          }, 0) / filteredTargetData.length;
        } else {
          // 매출, 다운로드, 위시리스트는 합계 계산
          targetAccumulated = filteredTargetData.reduce((sum, item) => {
            return sum + (item.value !== null ? Number(item.value) : 0);
          }, 0);
        }
        
        // 기간 내 일평균 계산
        targetAverage = filteredTargetData.reduce((sum, item) => {
          return sum + (item.value !== null ? Number(item.value) : 0);
        }, 0) / filteredTargetData.length;
        
        // 기간 내 증감률 계산 (선택 기간의 첫날과 마지막날 비교)
        if (filteredTargetData.length >= 2) {
          const firstDayValue = filteredTargetData[0].value || 0;
          const lastDayValue = filteredTargetData[filteredTargetData.length - 1].value || 0;
          
          if (firstDayValue > 0) {
            const changeRate = ((lastDayValue - firstDayValue) / firstDayValue) * 100;
            const isPositive = changeRate >= 0;
            const sign = isPositive ? '+' : '';
            const badgeClass = isPositive ? 'bg-success' : 'bg-danger';
            document.getElementById('targetChangeRate').className = `badge rounded-pill ${badgeClass}`;
            document.getElementById('targetChangeRate').textContent = `${sign}${changeRate.toFixed(2)}%`;
          }
        }
      }
      
      // 전체 데이터 합계 계산
      if (allGlobalData.length > 0) {
        if (isAverageMetric) {
          // DAU는 전체 기간의 평균
          globalTotal = allGlobalData.reduce((sum, item) => {
            return sum + (item.value !== null ? Number(item.value) : 0);
          }, 0) / allGlobalData.length;
        } else {
          // 매출, 다운로드, 위시리스트는 전체 합계
          globalTotal = allGlobalData.reduce((sum, item) => {
            return sum + (item.value !== null ? Number(item.value) : 0);
          }, 0);
        }
      }
      
      if (allTargetData.length > 0) {
        if (isAverageMetric) {
          // DAU는 전체 기간의 평균
          targetTotal = allTargetData.reduce((sum, item) => {
            return sum + (item.value !== null ? Number(item.value) : 0);
          }, 0) / allTargetData.length;
        } else {
          // 매출, 다운로드, 위시리스트는 전체 합계
          targetTotal = allTargetData.reduce((sum, item) => {
            return sum + (item.value !== null ? Number(item.value) : 0);
          }, 0);
        }
      }
      
      // 지표에 따라 단위 추가
      let unit = '';
      if (currentMetric === 'revenue') {
        unit = ' 원';
      } else if (currentMetric === 'downloads') {
        unit = ' 회';
      } else if (currentMetric === 'dau') {
        unit = ' 명';
      } else if (currentMetric === 'wishlist') {
        unit = ' 개';
      }
      
      // 기간 내 합계 표시
      document.getElementById('globalAccumulatedValue').textContent = Math.round(globalAccumulated).toLocaleString() + unit;
      document.getElementById('targetAccumulatedValue').textContent = Math.round(targetAccumulated).toLocaleString() + unit;
      
      // 기간 내 평균 표시
      document.getElementById('globalAverageValue').textContent = Math.round(globalAverage).toLocaleString() + unit;
      document.getElementById('targetAverageValue').textContent = Math.round(targetAverage).toLocaleString() + unit;
      
      // 전체 데이터 합계 표시
      document.getElementById('globalTotalValue').textContent = Math.round(globalTotal).toLocaleString() + unit;
      document.getElementById('targetTotalValue').textContent = Math.round(targetTotal).toLocaleString() + unit;
      
      console.log('차트 생성 완료');
      console.log('데이터 계산 결과:', { 
        기간내합계: { 글로벌: globalAccumulated, 진출국가: targetAccumulated },
        기간내평균: { 글로벌: globalAverage, 진출국가: targetAverage },
        전체합계: { 글로벌: globalTotal, 진출국가: targetTotal }
      });
      
    } catch (error) {
      console.error('차트 업데이트 중 오류 발생:', error);
      document.getElementById('performanceChartContainer').innerHTML = `
        <div class="alert alert-danger">
          <i class="bi bi-exclamation-triangle me-2"></i> 차트 생성 중 오류가 발생했습니다: ${error.message}
        </div>
      `;
    }
  }
  
  // 필터 변경 이벤트 리스너
  document.querySelectorAll('input[name="metricRadio"]').forEach(radio => {
    radio.addEventListener('change', function() {
      currentMetric = this.value;
      console.log('지표 변경:', currentMetric);
      updatePerformanceChart();
    });
  });
  
  // 날짜 필터 적용 버튼
  document.getElementById('applyDateFilter').addEventListener('click', function() {
    console.log('날짜 필터 적용:', document.getElementById('startDate').value, document.getElementById('endDate').value);
    updatePerformanceChart();
  });
  
  // 초기 차트 렌더링
  console.log('초기 차트 렌더링 시작');
  updatePerformanceChart();
});

// 포인트 사용 토글 함수
async function togglePointUsage(switchElement) {
  const contractId = switchElement.dataset.contractId;
  const usePoints = switchElement.checked;
  
  try {
    switchElement.disabled = true;
    
    const response = await fetch(`/points/toggle/${contractId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        usePoints: usePoints
      })
    });
    
    const result = await response.json();
    
    if (result.success) {
      // 성공시 페이지 새로고침으로 데이터 업데이트
      location.reload();
    } else {
      alert('오류: ' + result.message);
      // 원래 상태로 되돌리기
      switchElement.checked = !usePoints;
    }
  } catch (error) {
    alert('포인트 설정 중 오류가 발생했습니다: ' + error.message);
    switchElement.checked = !usePoints;
  } finally {
    switchElement.disabled = false;
  }
}
</script> 